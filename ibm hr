# -*- coding: utf-8 -*-
"""ibmhr.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1--UjK5Xsp5SF0eDMwkaO9BRFFfJJ8ShT
"""

import pandas as pd
import numpy as np

# Import data visualization packages
import matplotlib.pyplot as plt
import seaborn as sns

# Import warnings library
import warnings
warnings.filterwarnings('ignore')
pd.set_option('display.max_columns', 35)

df = pd.read_csv('/content/HR-Employee-Attrition (1).csv')
df.shape

print(f'Number of duplicated data: {df.duplicated().sum()}')
df.duplicated().sum()
df = df.drop_duplicates()

# Check for missing values in each column
missing_values = df.isnull().sum()

# Print the missing values
print(missing_values)
# Check for columns with missing values
missing_columns = missing_values[missing_values > 0]
print(missing_columns)

# Check the data types of each column
df.dtypes

# Get summary statistics for numerical columns
df.describe()

# Plot histogram for a specific column
# Plot histogram for the 'Age' column
df['Age'].hist(bins=10)
plt.show()

attrition_rate = df['Attrition'].value_counts(normalize=True)['Yes'] * 100
print(f"Attrition Rate: {attrition_rate:.2f}%")

# Import necessary libraries
import matplotlib.pyplot as plt
import seaborn as sns

# Plot the attrition distribution
plt.figure(figsize=(6,4))
sns.countplot(x='Attrition', data=df, palette='Set2')

# Add title and labels
plt.title('Employee Attrition Rate')
plt.xlabel('Attrition Status')
plt.ylabel('Count of Employees')

# Display the plot
plt.show()

# Calculate the average tenure
avg_tenure = df['YearsAtCompany'].mean()

# Print the result
print(f'Average years of employee to leave the company is {avg_tenure:.2f} years')

import matplotlib.pyplot as plt
import seaborn as sns

# Create subplots for Age, Gender, and Department distributions
fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15,5))

# 1. Age Distribution (Histogram with KDE)
sns.histplot(data=df, x='Age', kde=True, ax=axes[0])
axes[0].set_title('Distribution of Employees by Age')
axes[0].set_xlabel('Age')
axes[0].set_ylabel('Count')

# 2. Gender Distribution (Countplot)
sns.countplot(data=df, x='Gender', ax=axes[1])
axes[1].set_title('Distribution of Employees by Gender')
axes[1].set_xlabel('Gender')
axes[1].set_ylabel('Count')

# 3. Department Distribution (Countplot)
sns.countplot(data=df, x='Department', ax=axes[2])
axes[2].set_title('Distribution of Employees by Department')
axes[2].set_xlabel('Department')
axes[2].set_ylabel('Count')

# Adjust layout to avoid overlap
plt.tight_layout()

# Display the plots
plt.show()

# Function to calculate Attrition Rate by a specified column
def calculate_attrition_rate(df, column):
    attrition_counts = df.groupby([column, 'Attrition']).size().unstack(fill_value=0)
    attrition_rate = attrition_counts['Yes'] / attrition_counts.sum(axis=1) * 100
    attrition_rate_df = attrition_rate.reset_index()
    attrition_rate_df.columns = [column, 'AttritionRate']
    return attrition_rate_df

import matplotlib.pyplot as plt
import seaborn as sns

# Assuming df is your DataFrame

# Plotting the demographic factors
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 6))

# Plot 1: KDE plot of Age with Attrition hue
sns.kdeplot(data=df, x='Age', hue='Attrition', fill=True, ax=axes[0])
axes[0].set_title('Attrition by Age')
axes[0].set_xlabel('Age')
axes[0].set_ylabel('Density')

# Plot 2: Bar plot of Gender count with Attrition hue
attrition_rate_df = calculate_attrition_rate(df, 'Gender')
sns.barplot(data=attrition_rate_df, x='Gender', y='AttritionRate', ax=axes[1])
axes[1].set_title('Attrition Rate by Gender')
axes[1].set_xlabel('Gender')
axes[1].set_ylabel('Attrition Rate (%)')

# Adjust layout
plt.tight_layout()

# Display the plots
plt.show()

# Calculate overall attrition rate
attrition_counts = df['Attrition'].value_counts(normalize=True)
overall_attrition_rate = attrition_counts['Yes'] * 100
print(f"Overall Attrition Rate: {overall_attrition_rate:.2f}%")

# Function to calculate Attrition Rate by demographic column
def calculate_attrition_rate(df, column):
    attrition_counts = df.groupby([column, 'Attrition']).size().unstack(fill_value=0)
    attrition_rate = attrition_counts['Yes'] / attrition_counts.sum(axis=1) * 100
    attrition_rate_df = attrition_rate.reset_index()
    attrition_rate_df.columns = [column, 'AttritionRate']
    return attrition_rate_df

# Calculate attrition rate for each demographic factor
demographics = ['Age', 'Gender', 'Education', 'Department', 'JobRole']
for demographic in demographics:
    attrition_rate_df = calculate_attrition_rate(df, demographic)
    print(f"Attrition rate by {demographic}:\n", attrition_rate_df, '\n')

# Plotting attrition rate by multiple demographic factors (Education, Department, JobRole)
fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(18,6))

# Plot 1: Attrition rate by Education
attrition_rate_education = calculate_attrition_rate(df, 'Education')
sns.barplot(data=attrition_rate_education, x='Education', y='AttritionRate', ax=axes[0])
axes[0].set_title('Attrition Rate by Education')
axes[0].set_xlabel('Education Level')
axes[0].set_ylabel('Attrition Rate (%)')

# Plot 2: Attrition rate by Department
attrition_rate_department = calculate_attrition_rate(df, 'Department')
sns.barplot(data=attrition_rate_department, x='Department', y='AttritionRate', ax=axes[1])
axes[1].set_title('Attrition Rate by Department')
axes[1].set_xlabel('Department')
axes[1].set_ylabel('Attrition Rate (%)')

# Plot 3: Attrition rate by Job Role
attrition_rate_jobrole = calculate_attrition_rate(df, 'JobRole')
sns.barplot(data=attrition_rate_jobrole, x='JobRole', y='AttritionRate', ax=axes[2])
axes[2].set_title('Attrition Rate by Job Role')
axes[2].set_xlabel('Job Role')
axes[2].set_ylabel('Attrition Rate (%)')

plt.tight_layout()
plt.show()

# Attrition rate by Job Involvement
attrition_rate_jobinvolvement = calculate_attrition_rate(df, 'JobInvolvement')
sns.barplot(data=attrition_rate_jobinvolvement, x='JobInvolvement', y='AttritionRate')
plt.title('Attrition Rate by Job Involvement')
plt.xlabel('Job Involvement')
plt.ylabel('Attrition Rate (%)')
plt.show()

# Attrition rate by Work-Life Balance
attrition_rate_worklifebalance = calculate_attrition_rate(df, 'WorkLifeBalance')
sns.barplot(data=attrition_rate_worklifebalance, x='WorkLifeBalance', y='AttritionRate')
plt.title('Attrition Rate by Work-Life Balance')
plt.xlabel('Work-Life Balance')
plt.ylabel('Attrition Rate (%)')
plt.show()

# Attrition rate by Monthly Income
sns.boxplot(data=df, x='Attrition', y='MonthlyIncome')
plt.title('Attrition vs Monthly Income')
plt.xlabel('Attrition')
plt.ylabel('Monthly Income')
plt.show()

# Attrition rate by Percent Salary Hike
sns.boxplot(data=df, x='Attrition', y='PercentSalaryHike')
plt.title('Attrition vs Salary Hike')
plt.xlabel('Attrition')
plt.ylabel('Salary Hike (%)')
plt.show()

# Attrition rate by Stock Option Level
attrition_rate_stockoptions = calculate_attrition_rate(df, 'StockOptionLevel')
sns.barplot(data=attrition_rate_stockoptions, x='StockOptionLevel', y='AttritionRate')
plt.title('Attrition Rate by Stock Option Level')
plt.xlabel('Stock Option Level')
plt.ylabel('Attrition Rate (%)')
plt.show()